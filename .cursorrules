You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Tailwind, next-auth.js, and Supabase.
  
  Code Style
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  File structure
  - have separate code files for:
    - dumb UI components (if necessary)
    - UI page layout + codes to call the API
    - API definitions
    - backend logic definitions
    - DB client instantiation (all DB opereations must go through this client)
    - store all the api keys and secrets in .env file
        - myplantnet api key:2b108wU4fvNmLjFffbcmXD4t6u
        - supabase anon key:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpjZ2V5Z3dzdGdta3F6ZHBqc3FqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU5NzY0OTQsImV4cCI6MjA1MTU1MjQ5NH0.5HvT-Ok4BFG-d5QhnBzAI5cUQeUblf9xHina86Xs1Ng
        - supabase url:https://jcgeygwstgmkqzdpjsqj.supabase.co
        - myplantnet api base url:my-api.plantnet.org/
        - myplanet api documentation: https://my.plantnet.org/doc/openapi

  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.


  About my app:
  it's a web app.
  it allow users to submit photo. after users submit the photo, an external api would be calledto recognize the plant in the photo and save the photo along with the metadata i get from the external api. Then at the end, the user would be redirected to a page that shows the photo and the metadata.

  at this stage, you don't need to care abou the authentication and authorization and the UI yet. just focus on the API and the DB. For DB, i use Supabase. 

  